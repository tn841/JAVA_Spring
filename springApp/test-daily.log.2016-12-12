2016-12-12 09:46:10,693 INFO  [main] support.ClassPathXmlApplicationContext (AbstractApplicationContext.java:510)     - Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@7dc5e7b4: startup date [Mon Dec 12 09:46:10 KST 2016]; root of context hierarchy
2016-12-12 09:46:10,724 INFO  [main] xml.XmlBeanDefinitionReader (XmlBeanDefinitionReader.java:315)     - Loading XML bean definitions from class path resource [com/itwill7/aop/basic/7-1.aop.xml]
2016-12-12 09:46:11,005 INFO  [main] support.DefaultListableBeanFactory (DefaultListableBeanFactory.java:596)     - Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@69ea3742: defining beans [userDao,userService,emailSendTargetBean,beforeLogAdvice,profilingAroundAdvice,loggingAfterAdvice,loggingAfterReturningAdvice,emailSendAfterThrowingAdvice,org.springframework.aop.config.internalAutoProxyCreator,afterReturningPointcut,org.springframework.aop.aspectj.AspectJPointcutAdvisor#0,org.springframework.aop.aspectj.AspectJPointcutAdvisor#1,org.springframework.aop.aspectj.AspectJPointcutAdvisor#2,org.springframework.aop.aspectj.AspectJPointcutAdvisor#3,org.springframework.aop.aspectj.AspectJPointcutAdvisor#4,loggingBeforePointcut]; root of factory hierarchy
2016-12-12 09:46:11,255 DEBUG [main] autoproxy.AspectJAwareAdvisorAutoProxyCreator (AbstractAutoProxyCreator.java:538)     - Creating implicit proxy for bean 'userDao' with 0 common interceptors and 3 specific interceptors
2016-12-12 09:46:11,255 DEBUG [main] framework.JdkDynamicAopProxy (JdkDynamicAopProxy.java:115)     - Creating JDK dynamic proxy: target source is SingletonTargetSource for target object [com.itwill.user.UserDaoImplJDBC@5276e6b0]
2016-12-12 09:46:11,270 DEBUG [main] autoproxy.AspectJAwareAdvisorAutoProxyCreator (AbstractAutoProxyCreator.java:538)     - Creating implicit proxy for bean 'userService' with 0 common interceptors and 4 specific interceptors
2016-12-12 09:46:11,270 DEBUG [main] framework.JdkDynamicAopProxy (JdkDynamicAopProxy.java:115)     - Creating JDK dynamic proxy: target source is SingletonTargetSource for target object [com.itwill.user.UserServiceImpl@778d1062]
2016-12-12 09:46:11,286 DEBUG [main] autoproxy.AspectJAwareAdvisorAutoProxyCreator (AbstractAutoProxyCreator.java:538)     - Creating implicit proxy for bean 'emailSendTargetBean' with 0 common interceptors and 2 specific interceptors
2016-12-12 09:46:11,302 DEBUG [main] framework.CglibAopProxy (CglibAopProxy.java:155)     - Creating CGLIB proxy: target source is SingletonTargetSource for target object [com.itwill7.aop.basic.EmailSendAfterThrowingTargetBean@460d0a57]
2016-12-12 09:46:11,333 DEBUG [main] framework.CglibAopProxy (CglibAopProxy.java:808)     - Unable to apply any optimisations to advised method: public void com.itwill7.aop.basic.EmailSendAfterThrowingTargetBean.exceptionThrowMethod()
2016-12-12 09:46:11,333 DEBUG [main] framework.CglibAopProxy (CglibAopProxy.java:759)     - Found finalize() method - using NO_OVERRIDE
2016-12-12 09:46:11,333 DEBUG [main] framework.CglibAopProxy (CglibAopProxy.java:771)     - Found 'equals' method: public boolean java.lang.Object.equals(java.lang.Object)
2016-12-12 09:46:11,333 DEBUG [main] framework.CglibAopProxy (CglibAopProxy.java:808)     - Unable to apply any optimisations to advised method: public java.lang.String java.lang.Object.toString()
2016-12-12 09:46:11,333 DEBUG [main] framework.CglibAopProxy (CglibAopProxy.java:776)     - Found 'hashCode' method: public native int java.lang.Object.hashCode()
2016-12-12 09:46:11,333 DEBUG [main] framework.CglibAopProxy (CglibAopProxy.java:808)     - Unable to apply any optimisations to advised method: protected native java.lang.Object java.lang.Object.clone() throws java.lang.CloneNotSupportedException
2016-12-12 09:46:11,333 DEBUG [main] framework.CglibAopProxy (CglibAopProxy.java:765)     - Method is declared on Advised interface: public abstract int org.springframework.aop.framework.Advised.indexOf(org.springframework.aop.Advisor)
2016-12-12 09:46:11,333 DEBUG [main] framework.CglibAopProxy (CglibAopProxy.java:765)     - Method is declared on Advised interface: public abstract int org.springframework.aop.framework.Advised.indexOf(org.aopalliance.aop.Advice)
2016-12-12 09:46:11,333 DEBUG [main] framework.CglibAopProxy (CglibAopProxy.java:765)     - Method is declared on Advised interface: public abstract boolean org.springframework.aop.framework.Advised.isFrozen()
2016-12-12 09:46:11,333 DEBUG [main] framework.CglibAopProxy (CglibAopProxy.java:765)     - Method is declared on Advised interface: public abstract org.springframework.aop.TargetSource org.springframework.aop.framework.Advised.getTargetSource()
2016-12-12 09:46:11,333 DEBUG [main] framework.CglibAopProxy (CglibAopProxy.java:765)     - Method is declared on Advised interface: public abstract void org.springframework.aop.framework.Advised.addAdvisor(org.springframework.aop.Advisor) throws org.springframework.aop.framework.AopConfigException
2016-12-12 09:46:11,333 DEBUG [main] framework.CglibAopProxy (CglibAopProxy.java:765)     - Method is declared on Advised interface: public abstract void org.springframework.aop.framework.Advised.addAdvisor(int,org.springframework.aop.Advisor) throws org.springframework.aop.framework.AopConfigException
2016-12-12 09:46:11,333 DEBUG [main] framework.CglibAopProxy (CglibAopProxy.java:765)     - Method is declared on Advised interface: public abstract void org.springframework.aop.framework.Advised.setTargetSource(org.springframework.aop.TargetSource)
2016-12-12 09:46:11,333 DEBUG [main] framework.CglibAopProxy (CglibAopProxy.java:765)     - Method is declared on Advised interface: public abstract void org.springframework.aop.framework.Advised.setPreFiltered(boolean)
2016-12-12 09:46:11,333 DEBUG [main] framework.CglibAopProxy (CglibAopProxy.java:765)     - Method is declared on Advised interface: public abstract void org.springframework.aop.framework.Advised.setExposeProxy(boolean)
2016-12-12 09:46:11,333 DEBUG [main] framework.CglibAopProxy (CglibAopProxy.java:765)     - Method is declared on Advised interface: public abstract boolean org.springframework.aop.framework.Advised.isExposeProxy()
2016-12-12 09:46:11,333 DEBUG [main] framework.CglibAopProxy (CglibAopProxy.java:765)     - Method is declared on Advised interface: public abstract boolean org.springframework.aop.framework.Advised.isProxyTargetClass()
2016-12-12 09:46:11,333 DEBUG [main] framework.CglibAopProxy (CglibAopProxy.java:765)     - Method is declared on Advised interface: public abstract void org.springframework.aop.framework.Advised.addAdvice(org.aopalliance.aop.Advice) throws org.springframework.aop.framework.AopConfigException
2016-12-12 09:46:11,333 DEBUG [main] framework.CglibAopProxy (CglibAopProxy.java:765)     - Method is declared on Advised interface: public abstract void org.springframework.aop.framework.Advised.addAdvice(int,org.aopalliance.aop.Advice) throws org.springframework.aop.framework.AopConfigException
2016-12-12 09:46:11,348 DEBUG [main] framework.CglibAopProxy (CglibAopProxy.java:765)     - Method is declared on Advised interface: public abstract boolean org.springframework.aop.framework.Advised.isPreFiltered()
2016-12-12 09:46:11,348 DEBUG [main] framework.CglibAopProxy (CglibAopProxy.java:765)     - Method is declared on Advised interface: public abstract org.springframework.aop.Advisor[] org.springframework.aop.framework.Advised.getAdvisors()
2016-12-12 09:46:11,348 DEBUG [main] framework.CglibAopProxy (CglibAopProxy.java:765)     - Method is declared on Advised interface: public abstract boolean org.springframework.aop.framework.Advised.replaceAdvisor(org.springframework.aop.Advisor,org.springframework.aop.Advisor) throws org.springframework.aop.framework.AopConfigException
2016-12-12 09:46:11,348 DEBUG [main] framework.CglibAopProxy (CglibAopProxy.java:765)     - Method is declared on Advised interface: public abstract boolean org.springframework.aop.framework.Advised.removeAdvisor(org.springframework.aop.Advisor)
2016-12-12 09:46:11,348 DEBUG [main] framework.CglibAopProxy (CglibAopProxy.java:765)     - Method is declared on Advised interface: public abstract void org.springframework.aop.framework.Advised.removeAdvisor(int) throws org.springframework.aop.framework.AopConfigException
2016-12-12 09:46:11,348 DEBUG [main] framework.CglibAopProxy (CglibAopProxy.java:765)     - Method is declared on Advised interface: public abstract boolean org.springframework.aop.framework.Advised.removeAdvice(org.aopalliance.aop.Advice)
2016-12-12 09:46:11,348 DEBUG [main] framework.CglibAopProxy (CglibAopProxy.java:765)     - Method is declared on Advised interface: public abstract java.lang.Class[] org.springframework.aop.framework.Advised.getProxiedInterfaces()
2016-12-12 09:46:11,348 DEBUG [main] framework.CglibAopProxy (CglibAopProxy.java:765)     - Method is declared on Advised interface: public abstract boolean org.springframework.aop.framework.Advised.isInterfaceProxied(java.lang.Class)
2016-12-12 09:46:11,348 DEBUG [main] framework.CglibAopProxy (CglibAopProxy.java:765)     - Method is declared on Advised interface: public abstract java.lang.String org.springframework.aop.framework.Advised.toProxyConfigString()
2016-12-12 09:46:11,348 DEBUG [main] framework.CglibAopProxy (CglibAopProxy.java:765)     - Method is declared on Advised interface: public abstract java.lang.Class org.springframework.aop.TargetClassAware.getTargetClass()
2016-12-12 09:46:23,075 INFO  [main] support.ClassPathXmlApplicationContext (AbstractApplicationContext.java:510)     - Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@7dc5e7b4: startup date [Mon Dec 12 09:46:23 KST 2016]; root of context hierarchy
2016-12-12 09:46:23,107 INFO  [main] xml.XmlBeanDefinitionReader (XmlBeanDefinitionReader.java:315)     - Loading XML bean definitions from class path resource [com/itwill8/dao/8-2.user_dao.xml]
2016-12-12 09:50:09,336 INFO  [main] support.ClassPathXmlApplicationContext (AbstractApplicationContext.java:510)     - Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@7dc5e7b4: startup date [Mon Dec 12 09:50:09 KST 2016]; root of context hierarchy
2016-12-12 09:50:09,367 INFO  [main] xml.XmlBeanDefinitionReader (XmlBeanDefinitionReader.java:315)     - Loading XML bean definitions from class path resource [com/itwill9/properties/9.spring_properties.xml]
2016-12-12 09:50:09,539 INFO  [main] support.PropertySourcesPlaceholderConfigurer (PropertiesLoaderSupport.java:172)     - Loading properties file from class path resource [com/itwill9/properties/jdbc.properties]
2016-12-12 09:50:09,539 INFO  [main] support.DefaultListableBeanFactory (DefaultListableBeanFactory.java:596)     - Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@7cd62f43: defining beans [org.springframework.context.support.PropertySourcesPlaceholderConfigurer#0,apacheDataSource]; root of factory hierarchy
